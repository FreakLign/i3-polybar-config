runtime! archlinux.vim
so ~/.vim/plugins.vim
map <C-o> :NERDTreeToggle<CR>

" reformat (without plugins)
map <F7> mzgg=G`z
" compile c++ file
map <F8> :w <CR> :!g++ % -o %<  <CR>
" execute c++ file with input.txt as stdin
map <F9> :!cat input.txt \| ./%<  <CR>
map <F10> :!cat test_input.txt \| ./%<  <CR>
" fzf search on files
map ; :Files<CR>

" move line up and down
nnoremap <C-S-Up> <Up>"add"ap<Up>
nnoremap <C-S-Down> "add"ap

" Format c code
nnoremap <C-S-i> :ClangFormat <CR>

" highlight every search match
nnoremap <C-h> :set hlsearch!<CR>

" smooth scroll
noremap <silent> <ScrollWheelDown> :call comfortable_motion#flick(40)<CR>
noremap <silent> <ScrollWheelUp>   :call comfortable_motion#flick(-40)<CR>
let g:comfortable_motion_friction = 0.0
let g:comfortable_motion_air_drag = 10.0

let g:ycm_python_interpreter_path = ''
let g:ycm_python_sys_path = []
let g:ycm_extra_conf_vim_data = [
  \  'g:ycm_python_interpreter_path',
  \  'g:ycm_python_sys_path'
  \]
let g:ycm_global_ycm_extra_conf = '~/.vim/YouCompleteMe/global_extra_conf.py'

let vim_markdown_preview_github=1
let vim_markdown_preview_browser='chromium'

" indentation settings
set tabstop=3
set shiftwidth=3
set softtabstop=0 expandtab
set incsearch

" 
let g:clang_format#style_options = {
            \ "Standard" : "C++11",
            \ "IndentWidth" : 3,
            \ "UseTab" : "false",
            \ "AccessModifierOffset" : -2,
            \ "ColumnLimit" : 0 }

" to enable copy-past to/from system clipboard
set clipboard=unnamedplus

set spell spelllang=en_gb

set number
set cursorline
set mouse=a
syntax on 

" http://vim.wikia.com/wiki/Auto_highlight_current_word_when_idle
" Highlight all instances of word under cursor, when idle.
" Useful when studying strange source code.
" Type z/ to toggle highlighting on/off.
nnoremap z/ :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>
function! AutoHighlightToggle()
  let @/ = ''
  if exists('#auto_highlight')
    au! auto_highlight
    augroup! auto_highlight
    setl updatetime=4000
    echo 'Highlight current word: off'
    return 0
  else
    augroup auto_highlight
      au!
      au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
    augroup end
    setl updatetime=300
    echo 'Highlight current word: ON'
    return 1
  endif
endfunction
